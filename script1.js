// üëâ –î–∏–Ω–∞–º–∏—á–Ω–∞ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞ –∑–∞ –±–µ–∫–µ–Ω–¥ URL
const BACKEND_URL = window.location.hostname.includes('localhost')
    ? 'http://localhost:3000'
    : 'https://smartify-backend.onrender.com'; // —Å–ª–æ–∂–∏ —Ç—É–∫ —Ä–µ–∞–ª–Ω–∏—è —Ç–∏ URL, –∞–∫–æ –µ —Ä–∞–∑–ª–∏—á–µ–Ω

// –†–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç –æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF
document.getElementById('analyzeButton').addEventListener('click', async function () {
    const fileInput = document.getElementById('fileInput');
    const extractedTextElement = document.getElementById('extractedText');

    if (fileInput.files.length === 0) {
        alert('–ú–æ–ª—è, –∫–∞—á–µ—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF —Ñ–∞–π–ª!');
        return;
    }

    const file = fileInput.files[0];
    const fileType = file.type;

    extractedTextElement.textContent = "–û–±—Ä–∞–±–æ—Ç–≤–∞–Ω–µ...";

    if (fileType === "application/pdf") {
        extractTextFromPDF(file).then(text => {
            extractedTextElement.textContent = text || '–ù–µ –±–µ—à–µ –Ω–∞–º–µ—Ä–µ–Ω —Ç–µ–∫—Å—Ç –≤ PDF —Ñ–∞–π–ª–∞.';
        }).catch(error => {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ PDF:', error);
            alert('–ù–µ—É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç PDF!');
        });
    } else {
        Tesseract.recognize(
            file,
            'bul',
            { logger: (m) => console.log(m) }
        ).then(({ data: { text } }) => {
            extractedTextElement.textContent = text || '–ù–µ –±–µ—à–µ –Ω–∞–º–µ—Ä–µ–Ω —Ç–µ–∫—Å—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ.';
        }).catch(error => {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ:', error);
            alert('–ù–µ—É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–∞!');
        });
    }
});

async function extractTextFromPDF(file) {
    const reader = new FileReader();
    return new Promise((resolve, reject) => {
        reader.onload = async function () {
            try {
                const pdf = await pdfjsLib.getDocument({ data: new Uint8Array(reader.result) }).promise;
                let text = "";
                for (let i = 1; i <= pdf.numPages; i++) {
                    const page = await pdf.getPage(i);
                    const content = await page.getTextContent();
                    text += content.items.map(item => item.str).join(" ") + " ";
                }
                resolve(text.trim());
            } catch (error) {
                reject(error);
            }
        };
        reader.onerror = () => reject(reader.error);
        reader.readAsArrayBuffer(file);
    });
}

// –û–±–æ–±—â–∞–≤–∞–Ω–µ —á—Ä–µ–∑ –±–µ–∫–µ–Ω–¥ —Å—ä—Ä–≤—ä—Ä–∞
async function summarizeTextAI(text) {
    try {
        const response = await fetch(`${BACKEND_URL}/summarize`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ text })
        });

        if (!response.ok) {
            const errorMessage = await response.text();
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–æ–±—â–∞–≤–∞–Ω–µ—Ç–æ:', errorMessage);
            alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–æ–±—â–∞–≤–∞–Ω–µ—Ç–æ!');
            return null;
        }

        const result = await response.json();
        return result.summary || "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–æ–±—â–∞–≤–∞–Ω–µ—Ç–æ.";
    } catch (err) {
        console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–æ–±—â–∞–≤–∞–Ω–µ—Ç–æ:', err);
        alert('–í—ä–∑–Ω–∏–∫–Ω–∞ –ø—Ä–æ–±–ª–µ–º —Å –æ–±–æ–±—â–∞–≤–∞–Ω–µ—Ç–æ.');
        return null;
    }
}

document.getElementById('summarizeButton').addEventListener('click', async function () {
    const extractedText = document.getElementById('extractedText').textContent;
    const summaryElement = document.getElementById('summaryText');

    if (!extractedText || extractedText.includes('–∫–∞—á–µ—Ç–µ')) {
        alert('–ù—è–º–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞—Ç —Ç–µ–∫—Å—Ç –∑–∞ –æ–±–æ–±—â–∞–≤–∞–Ω–µ!');
        return;
    }

    summaryElement.textContent = "–û–±–æ–±—â–∞–≤–∞–Ω–µ...";

    const summarizedText = await summarizeTextAI(extractedText);
    summaryElement.textContent = summarizedText || "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–æ–±—â–∞–≤–∞–Ω–µ—Ç–æ!";
});

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –≤ –∞—É–¥–∏–æ —á—Ä–µ–∑ –±–µ–∫–µ–Ω–¥ —Å—ä—Ä–≤—ä—Ä–∞
document.getElementById('convertToAudioButton').addEventListener('click', async function () {
    const summaryText = document.getElementById('summaryText').textContent;

    if (!summaryText || summaryText.includes('–ì—Ä–µ—à–∫–∞')) {
        alert('–ù—è–º–∞ —Ç–µ–∫—Å—Ç –∑–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –≤ –∞—É–¥–∏–æ!');
        return;
    }

    try {
        const response = await fetch(`${BACKEND_URL}/convert-to-audio`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ text: summaryText })
        });

        if (!response.ok) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ—Ç–æ –≤ –∞—É–¥–∏–æ');
            alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ—Ç–æ –≤ –∞—É–¥–∏–æ');
            return;
        }

        const data = await response.json();
        const audioPlayer = document.getElementById('audioPlayer');
        audioPlayer.src = data.audioUrl;
        audioPlayer.play();
    } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞—Ç–∞:', error);
        alert('–ü—Ä–æ–±–ª–µ–º —Å –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—è—Ç–∞ —Å—ä—Å —Å—ä—Ä–≤—ä—Ä–∞.');
    }
});



